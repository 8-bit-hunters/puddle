{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Url Downloader Library \ud83e\udd37","text":"<p>PUDLy is yet another URL downloader for python.</p>"},{"location":"#goal-of-the-project","title":"Goal of the project","text":"<p>The goal of this project is to create simple functions to handle file download tasks.</p> <p>The two main components of this library are:</p> <ul> <li><code>download()</code></li> <li><code>download_files_concurrently()</code></li> </ul>"},{"location":"#how-to-use","title":"How to use","text":""},{"location":"#downloading-one-file","title":"Downloading one file","text":"<p>The <code>download</code> function can be used to download a file from an url. The function returns the downloaded file's path as <code>Path</code>.</p> <pre><code>from pudly import download\n\nurl = \"https://databank.worldbank.org/data/download/WDI_CSV.zip\"\nfile = download(url)\n\nassert file.exists()\n</code></pre> <p>It takes optional arguments to specify the download directory or any query parameters for the request.</p> <pre><code>from pudly import download\nfrom pathlib import Path\n\nurl = \"https://api.worldbank.org/v2/en/indicator/NY.GDP.MKTP.CD\"\nquery_parameters = {\"downloadformat\": \"csv\"}\ndownload_directory = Path(\"data\")\n\nfile = download(url, download_dir=download_directory, query_parameters=query_parameters)\n\nassert file.exists()\n</code></pre>"},{"location":"#downloading-multiple-files","title":"Downloading multiple files","text":"<p>The <code>download_files_concurrently</code> function uses threading to download files in parallel. It returns the list of the downloaded file's path.</p> <pre><code>from pathlib import Path\nfrom pudly import download_files_concurrently\n\nurls = [\n    \"https://api.worldbank.org/v2/en/indicator/SP.POP.TOTL?downloadformat=csv\",\n    \"https://api.worldbank.org/v2/en/indicator/NY.GDP.MKTP.CD?downloadformat=csv\",\n    \"https://api.worldbank.org/v2/en/indicator/EN.POP.DNST?downloadformat=csv\",\n]\ndownload_dictionary = Path(\"data\")\n\nfiles = download_files_concurrently(urls, download_dir=download_dictionary)\n\nfor file in files:\n    assert file.exists()\n</code></pre> <p>Note</p> <p><code>download_dir</code> and <code>query_parameters</code> arguments are used for every URL in the list when downloaded.</p>"},{"location":"#authentication","title":"Authentication","text":"<p>Currently, the following option are available for authentication for webservers that requires it.</p>"},{"location":"#basic-authentication","title":"Basic authentication","text":"<p>This is the simplest kind of authentication method for web services. You have to create a <code>HTTPBasicAuth</code> instance with your credentials, then pass it as an argument to the <code>download</code> function.</p> <pre><code>from pudly import download, HTTPBasicAuth\n\ncredential = HTTPBasicAuth(\"username\", \"password\")\ndownload(\"https://www.myurl.com/download\", auth=credential)\n</code></pre>"},{"location":"#netrc-authentication","title":"netrc authentication","text":"<p>If no authentication method is given with the <code>auth</code> argument, <code>pudly</code> will attempt to get the authentication credentials for the URL's hostname from the user's <code>netrc</code> file.</p> <p>Documentation of the <code>netrc</code> file</p>"},{"location":"#exception-handling","title":"Exception Handling","text":"<p>The library has custom exception type called <code>DownloadError</code>. Errors from <code>requests</code> are caught and raised as <code>DownloadError</code>.</p> <p>The downloaded file is validated at the end of the process by comparing the expected size with the actual one. If the sizes are mismatched then <code>DownloadError</code> will be raised.</p>"},{"location":"#logging","title":"Logging","text":"<p>The library uses the python logging library. The name of the logger is <code>pudly</code> and can be accessed by importing it or calling the <code>logging.getLogger()</code> function.</p>"},{"location":"#importing","title":"Importing","text":"<pre><code>from pudly import logger as pudly_logger\n</code></pre>"},{"location":"#getlogger","title":"getLogger","text":"<pre><code>import logging\n\npudly_logger = logging.getLogger(\"pudly\")\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>If you want to enable the logging for the library, you can add a handler to the <code>log</code> logger as in the following example.</p> <pre><code>import logging\nfrom pudly import download\nfrom pudly import logger as pudly_logger\n\nlog_format = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\nformatter = logging.Formatter(log_format)\n\nconsole = logging.StreamHandler()\nconsole.setLevel(logging.DEBUG)\nconsole.setFormatter(formatter)\n\npudly_logger.addHandler(console)\npudly_logger.setLevel(logging.DEBUG)\n\ndownload(\"https://api.worldbank.org/v2/en/indicator/NY.GDP.MKTP.CD?downloadformat=csv\")\n</code></pre> <p>Output on console:</p> <pre><code>2024-11-23 17:14:21,992 - pudly - INFO - Download from https://api.worldbank.org/v2/en/indicator/NY.GDP.MKTP.CD?downloadformat=csv (135117 bytes)\n2024-11-23 17:14:21,992 - pudly - DEBUG - Start downloading API_NY.GDP.MKTP.CD_DS2_en_csv_v2_2.zip\n2024-11-23 17:14:22,019 - pudly - DEBUG - API_NY.GDP.MKTP.CD_DS2_en_csv_v2_2.zip downloaded 135117 bytes / 135117 bytes\n2024-11-23 17:14:22,019 - pudly - DEBUG - Finished downloading API_NY.GDP.MKTP.CD_DS2_en_csv_v2_2.zip\n2024-11-23 17:14:22,020 - pudly - INFO - Downloaded API_NY.GDP.MKTP.CD_DS2_en_csv_v2_2.zip successfully\n</code></pre>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#v100-2024-11-23","title":"v1.0.0 (2024-11-23)","text":""},{"location":"CHANGELOG/#_1","title":"CHANGELOG","text":"<ul> <li> <p> Rename project to PUDLy   (<code>41e7301</code>)</p> </li> <li> <p> Indicate helper functions as private   (<code>19794cc</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#_2","title":"CHANGELOG","text":"<ul> <li> <p> Add function to download multiple files concurrently   (<code>75fa5e1</code>)</p> </li> <li> <p> Raise error if the downloaded file size doesn't match the total size   (<code>4368dce</code>)</p> </li> <li> <p> Return the path of the downloaded file   (<code>82c13e1</code>)</p> </li> <li> <p> Add option to define download directory   (<code>8ab5483</code>)</p> </li> <li> <p> Allow to use query parameters   (<code>6fe9687</code>)</p> </li> <li> <p> Download file from a given URL   (<code>34d0427</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#_3","title":"CHANGELOG","text":"<ul> <li> Increase the download chunk size to 25 MB   (<code>4ebac26</code>)</li> </ul>"},{"location":"CHANGELOG/#other","title":"Other","text":"<ul> <li> <p> Use one workflow for releasing   (<code>0b5ba08</code>)</p> </li> <li> <p> Fix publish trigger issue with PAT   (<code>5f9ff54</code>)</p> </li> <li> <p> Run PyPi publish also when release is published   (<code>549653e</code>)</p> </li> <li> <p> Run PyPi publish when version tag is created   (<code>81314a2</code>)</p> </li> <li> <p> Fix testing Github workflow badge   (<code>7946b17</code>)</p> </li> <li> <p> Only publish to PyPi when release is created   (<code>4737f32</code>)</p> </li> <li> <p> Fix build failure   (<code>6f6bac5</code>)</p> </li> <li> <p> Add publish link for PyPi   (<code>7f5c13c</code>)</p> </li> <li> <p> Add documentation for the code   (<code>771837f</code>)</p> </li> <li> <p> Add development dependencies to create mkdocs page   (<code>94e2b97</code>)</p> </li> <li> <p> Add project links to pyproject.toml   (<code>82eef3a</code>)</p> </li> <li> <p> Update README   (<code>b3b5ea2</code>)</p> </li> <li> <p> Document library elements with docstrings.   (<code>66765d8</code>)</p> </li> <li> <p> Show the file name in download progress logs   (<code>cd86894</code>)</p> </li> <li> <p> Add test to check download function end-to-end   (<code>8a817f1</code>)</p> </li> <li> <p> Use classes to represent downloaded file in different stages   (<code>bce81d8</code>)</p> </li> <li> <p> Refactor code for readability   (<code>b16f14e</code>)</p> </li> <li> <p> Remove pydantic model definitions   (<code>9ae6ca1</code>)</p> </li> <li> <p> Use Path type for open the file   (<code>aba6458</code>)</p> </li> <li> <p> Add requests as dependency   (<code>31e8d36</code>)</p> </li> <li> <p> Change project name and add author   (<code>fb326dd</code>)</p> </li> </ul>"},{"location":"CHANGELOG/#v000-2024-11-22","title":"v0.0.0 (2024-11-22)","text":""},{"location":"CHANGELOG/#other_1","title":"Other","text":"<ul> <li>Initial commit   (<code>1886c50</code>)</li> </ul>"},{"location":"references/","title":"API","text":""},{"location":"references/#pudly.pudly.DownloadedFile","title":"<code>DownloadedFile</code>","text":"<p>Represents a file downloaded from a URL.</p> Source code in <code>pudly/pudly.py</code> <pre><code>class DownloadedFile:\n    \"\"\"\n    Represents a file downloaded from a URL.\n    \"\"\"\n\n    def __init__(self, path: Path, total_size: int) -&gt; None:\n        \"\"\"\n        Initialise a DownloadedFile object.\n\n        Args:\n            path: The path of the downloaded file.\n            total_size: The total size of the downloaded file from download information.\n        \"\"\"\n        self._path = path\n        self._total_size = total_size\n\n    @property\n    def path(self) -&gt; Path:\n        return self._path\n\n    def total_size_in_bytes(self) -&gt; int:\n        \"\"\"\n        Return the total size in bytes according to download information.\n\n        Returns:\n            The total size in bytes.\n        \"\"\"\n        return self._total_size\n\n    def size_is_correct(self) -&gt; bool:\n        \"\"\"\n        Compare the size of the file to the total size according to\n        download information.\n\n        Returns:\n             True if the size is correct, False otherwise.\n        \"\"\"\n        return self.path.stat().st_size == self._total_size\n</code></pre>"},{"location":"references/#pudly.pudly.DownloadedFile.__init__","title":"<code>__init__(path, total_size)</code>","text":"<p>Initialise a DownloadedFile object.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path of the downloaded file.</p> required <code>total_size</code> <code>int</code> <p>The total size of the downloaded file from download information.</p> required Source code in <code>pudly/pudly.py</code> <pre><code>def __init__(self, path: Path, total_size: int) -&gt; None:\n    \"\"\"\n    Initialise a DownloadedFile object.\n\n    Args:\n        path: The path of the downloaded file.\n        total_size: The total size of the downloaded file from download information.\n    \"\"\"\n    self._path = path\n    self._total_size = total_size\n</code></pre>"},{"location":"references/#pudly.pudly.DownloadedFile.size_is_correct","title":"<code>size_is_correct()</code>","text":"<p>Compare the size of the file to the total size according to download information.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the size is correct, False otherwise.</p> Source code in <code>pudly/pudly.py</code> <pre><code>def size_is_correct(self) -&gt; bool:\n    \"\"\"\n    Compare the size of the file to the total size according to\n    download information.\n\n    Returns:\n         True if the size is correct, False otherwise.\n    \"\"\"\n    return self.path.stat().st_size == self._total_size\n</code></pre>"},{"location":"references/#pudly.pudly.DownloadedFile.total_size_in_bytes","title":"<code>total_size_in_bytes()</code>","text":"<p>Return the total size in bytes according to download information.</p> <p>Returns:</p> Type Description <code>int</code> <p>The total size in bytes.</p> Source code in <code>pudly/pudly.py</code> <pre><code>def total_size_in_bytes(self) -&gt; int:\n    \"\"\"\n    Return the total size in bytes according to download information.\n\n    Returns:\n        The total size in bytes.\n    \"\"\"\n    return self._total_size\n</code></pre>"},{"location":"references/#pudly.pudly.FileToDownload","title":"<code>FileToDownload</code>","text":"<p>Represents a file to be downloaded from a URL.</p> Source code in <code>pudly/pudly.py</code> <pre><code>class FileToDownload:\n    \"\"\"\n    Represents a file to be downloaded from a URL.\n    \"\"\"\n\n    def __init__(self, response: requests.Response) -&gt; None:\n        \"\"\"\n        Initialise a FileToDownload object\n\n        Args:\n            response: The response object from the requests to a URL.\n        \"\"\"\n        self._total_size = int(response.headers.get(\"content-length\", 0))\n        self._connection = response\n        self._url = self._connection.url\n        self._download_dir = Path()\n        self._name = self._get_name()\n\n    @property\n    def total_size_in_bytes(self) -&gt; int:\n        return self._total_size\n\n    @property\n    def url(self) -&gt; str:\n        return self._url\n\n    @property\n    def name(self) -&gt; Path:\n        return self._name\n\n    @property\n    def download_dir(self) -&gt; Path:\n        return self._download_dir\n\n    @download_dir.setter\n    def download_dir(self, path: Path) -&gt; None:\n        self._download_dir = path\n\n    def download(self, download_chunk_size: int) -&gt; DownloadedFile:\n        \"\"\"\n        Download the file from the URL.\n\n        Args:\n            download_chunk_size: The size of a fragment in bytes during download.\n\n        Returns:\n             The downloaded file object.\n        \"\"\"\n        self._download_dir.mkdir(parents=True, exist_ok=True)\n        full_path = self._download_dir / self._name\n        with open(full_path, mode=\"wb\") as f:  # noqa: PTH123\n            downloaded_size = 0\n            logger.debug(f\"Start downloading {self.name}\")\n            for chunk in self._connection.iter_content(chunk_size=download_chunk_size):\n                downloaded_size += len(chunk)\n                logger.debug(\n                    f\"{self._name} downloaded {downloaded_size} bytes\"\n                    f\" / {self._total_size} bytes\"\n                )\n                f.write(chunk)\n        logger.debug(f\"Finished downloading {self.name}\")\n        return DownloadedFile(full_path, self._total_size)\n\n    def _get_name(self) -&gt; Path:\n        try:\n            name = _get_filename_from_response(self._connection)\n        except (KeyError, IndexError):\n            name = _get_filename_from_url(self._url)\n        return Path(name)\n</code></pre>"},{"location":"references/#pudly.pudly.FileToDownload.__init__","title":"<code>__init__(response)</code>","text":"<p>Initialise a FileToDownload object</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>The response object from the requests to a URL.</p> required Source code in <code>pudly/pudly.py</code> <pre><code>def __init__(self, response: requests.Response) -&gt; None:\n    \"\"\"\n    Initialise a FileToDownload object\n\n    Args:\n        response: The response object from the requests to a URL.\n    \"\"\"\n    self._total_size = int(response.headers.get(\"content-length\", 0))\n    self._connection = response\n    self._url = self._connection.url\n    self._download_dir = Path()\n    self._name = self._get_name()\n</code></pre>"},{"location":"references/#pudly.pudly.FileToDownload.download","title":"<code>download(download_chunk_size)</code>","text":"<p>Download the file from the URL.</p> <p>Parameters:</p> Name Type Description Default <code>download_chunk_size</code> <code>int</code> <p>The size of a fragment in bytes during download.</p> required <p>Returns:</p> Type Description <code>DownloadedFile</code> <p>The downloaded file object.</p> Source code in <code>pudly/pudly.py</code> <pre><code>def download(self, download_chunk_size: int) -&gt; DownloadedFile:\n    \"\"\"\n    Download the file from the URL.\n\n    Args:\n        download_chunk_size: The size of a fragment in bytes during download.\n\n    Returns:\n         The downloaded file object.\n    \"\"\"\n    self._download_dir.mkdir(parents=True, exist_ok=True)\n    full_path = self._download_dir / self._name\n    with open(full_path, mode=\"wb\") as f:  # noqa: PTH123\n        downloaded_size = 0\n        logger.debug(f\"Start downloading {self.name}\")\n        for chunk in self._connection.iter_content(chunk_size=download_chunk_size):\n            downloaded_size += len(chunk)\n            logger.debug(\n                f\"{self._name} downloaded {downloaded_size} bytes\"\n                f\" / {self._total_size} bytes\"\n            )\n            f.write(chunk)\n    logger.debug(f\"Finished downloading {self.name}\")\n    return DownloadedFile(full_path, self._total_size)\n</code></pre>"},{"location":"references/#pudly.pudly.download","title":"<code>download(url, query_parameters=None, download_dir=None, auth=None)</code>","text":"<p>Download the file from the URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to download from.</p> required <code>query_parameters</code> <code>dict | None</code> <p>Parameters to pass to the URL.</p> <code>None</code> <code>download_dir</code> <code>Path | None</code> <p>The directory to download the file to.</p> <code>None</code> <p>Returns:</p> Type Description <code>Path</code> <p>The path of the downloaded file.</p> <p>Raises:</p> Type Description <code>DownloadError</code> <p>If the download fails.</p> Source code in <code>pudly/pudly.py</code> <pre><code>def download(\n    url: str,\n    query_parameters: dict | None = None,\n    download_dir: Path | None = None,\n    auth: HTTPBasicAuth | None = None,\n) -&gt; Path:\n    \"\"\"\n    Download the file from the URL.\n\n    Args:\n        url: The URL to download from.\n        query_parameters: Parameters to pass to the URL.\n        download_dir: The directory to download the file to.\n\n    Returns:\n         The path of the downloaded file.\n\n    Raises:\n        DownloadError: If the download fails.\n    \"\"\"\n    try:\n        response = requests.get(\n            url, stream=True, timeout=TIMEOUT_S, params=query_parameters, auth=auth\n        )\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise DownloadError from e\n\n    file = FileToDownload(response)\n\n    logger.info(f\"Download from {file.url} ({file.total_size_in_bytes} bytes)\")\n\n    if download_dir:\n        file.download_dir = download_dir\n\n    downloaded_file = file.download(DOWNLOAD_CHUNK_MB * MEGABYTE_TO_BYTES)\n\n    if not downloaded_file.size_is_correct():\n        message = f\"File size corrupted for {downloaded_file.path}\"\n        raise DownloadError(message)\n\n    logger.info(f\"Downloaded {downloaded_file.path.name} successfully\")\n\n    return downloaded_file.path\n</code></pre>"},{"location":"references/#pudly.pudly.download_files_concurrently","title":"<code>download_files_concurrently(url_list, query_parameters=None, download_dir=None, auth=None, max_workers=5)</code>","text":"<p>Download files from a list of URLs.</p> <p>Parameters:</p> Name Type Description Default <code>url_list</code> <code>list[str]</code> <p>The list of URLs to download.</p> required <code>query_parameters</code> <code>dict | None</code> <p>The parameters to pass to the URLs.</p> <code>None</code> <code>download_dir</code> <code>Path | None</code> <p>The directory to download the files to.</p> <code>None</code> <code>max_workers</code> <code>int</code> <p>The maximum number of concurrent downloads.</p> <code>5</code> <p>Returns:</p> Type Description <code>list[Path]</code> <p>The list of paths to the downloaded files.</p> Source code in <code>pudly/pudly.py</code> <pre><code>def download_files_concurrently(\n    url_list: list[str],\n    query_parameters: dict | None = None,\n    download_dir: Path | None = None,\n    auth: HTTPBasicAuth | None = None,\n    max_workers: int = 5,\n) -&gt; list[Path]:\n    \"\"\"\n    Download files from a list of URLs.\n\n    Args:\n        url_list: The list of URLs to download.\n        query_parameters: The parameters to pass to the URLs.\n        download_dir: The directory to download the files to.\n        max_workers: The maximum number of concurrent downloads.\n\n    Returns:\n         The list of paths to the downloaded files.\n    \"\"\"\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:\n        futures = [\n            executor.submit(\n                download,\n                url,\n                query_parameters=query_parameters,\n                download_dir=download_dir,\n                auth=auth,\n            )\n            for url in url_list\n        ]\n\n    return [future.result() for future in concurrent.futures.as_completed(futures)]\n</code></pre>"}]}